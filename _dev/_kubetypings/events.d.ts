/// <reference path="./globals.d.ts" />
declare function onEvent(name: "entity.spawned", handler: (event: Internal.EntitySpawnedEventJS) => void);
declare function captureEvent(name: "entity.spawned", handler: (event: Internal.EntitySpawnedEventJS) => void);
declare function onEvent(name: "entity.attack", handler: (event: Internal.LivingEntityAttackEventJS) => void);
declare function captureEvent(name: "entity.attack", handler: (event: Internal.LivingEntityAttackEventJS) => void);
declare function onEvent(name: "jei.hide.fluids", handler: (event: Internal.HideJEIEventJS) => void);
declare function captureEvent(name: "jei.hide.fluids", handler: (event: Internal.HideJEIEventJS) => void);
declare function onEvent(name: "player.tick", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function captureEvent(name: "player.tick", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function onEvent(name: "player.inventory.opened", handler: (event: Internal.InventoryEventJS) => void);
declare function captureEvent(name: "player.inventory.opened", handler: (event: Internal.InventoryEventJS) => void);
declare function onEvent(name: "item.right_click_empty", handler: (event: Internal.ItemRightClickEmptyEventJS) => void);
declare function captureEvent(name: "item.right_click_empty", handler: (event: Internal.ItemRightClickEmptyEventJS) => void);
declare function onEvent(name: "block.left_click", handler: (event: Internal.BlockLeftClickEventJS) => void);
declare function captureEvent(name: "block.left_click", handler: (event: Internal.BlockLeftClickEventJS) => void);
declare function onEvent(name: "loaded", handler: (event: Internal.StartupEventJS) => void);
declare function captureEvent(name: "loaded", handler: (event: Internal.StartupEventJS) => void);
declare function onEvent(name: "client.tick", handler: (event: Internal.ClientTickEventJS) => void);
declare function captureEvent(name: "client.tick", handler: (event: Internal.ClientTickEventJS) => void);
declare function onEvent(name: "client.logged_out", handler: (event: Internal.ClientLoggedInEventJS) => void);
declare function captureEvent(name: "client.logged_out", handler: (event: Internal.ClientLoggedInEventJS) => void);
declare function onEvent(name: "entity.death", handler: (event: Internal.LivingEntityDeathEventJS) => void);
declare function captureEvent(name: "entity.death", handler: (event: Internal.LivingEntityDeathEventJS) => void);
declare function onEvent(name: "item.modification", handler: (event: Internal.ItemModificationEventJS) => void);
declare function captureEvent(name: "item.modification", handler: (event: Internal.ItemModificationEventJS) => void);
declare function onEvent(name: "jei.information", handler: (event: Internal.InformationJEIEventJS) => void);
declare function captureEvent(name: "jei.information", handler: (event: Internal.InformationJEIEventJS) => void);
declare function onEvent(name: "postinit", handler: (event: Internal.StartupEventJS) => void);
declare function captureEvent(name: "postinit", handler: (event: Internal.StartupEventJS) => void);
declare function onEvent(name: "fluid.registry", handler: (event: Internal.FluidRegistryEventJS) => void);
declare function captureEvent(name: "fluid.registry", handler: (event: Internal.FluidRegistryEventJS) => void);
declare function onEvent(name: "player.logged_out", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function captureEvent(name: "player.logged_out", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function onEvent(name: "init", handler: (event: Internal.StartupEventJS) => void);
declare function captureEvent(name: "init", handler: (event: Internal.StartupEventJS) => void);
declare function onEvent(name: "recipes", handler: (event: Internal.RecipeEventJS) => void);
declare function captureEvent(name: "recipes", handler: (event: Internal.RecipeEventJS) => void);
declare function onEvent(name: "player.chest.opened", handler: (event: Internal.ChestEventJS) => void);
declare function captureEvent(name: "player.chest.opened", handler: (event: Internal.ChestEventJS) => void);
declare function onEvent(name: "server.load", handler: (event: Internal.ServerEventJS) => void);
declare function captureEvent(name: "server.load", handler: (event: Internal.ServerEventJS) => void);
declare function onEvent(name: "block.tags", handler: (event: Internal.TagEventJS) => void);
declare function captureEvent(name: "block.tags", handler: (event: Internal.TagEventJS) => void);
declare function onEvent(name: "player.logged_in", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function captureEvent(name: "player.logged_in", handler: (event: Internal.SimplePlayerEventJS) => void);
declare function onEvent(name: "item.smelted", handler: (event: Internal.ItemSmeltedEventJS) => void);
declare function captureEvent(name: "item.smelted", handler: (event: Internal.ItemSmeltedEventJS) => void);
declare function onEvent(name: "server.datapack.last", handler: (event: Internal.DataPackEventJS) => void);
declare function captureEvent(name: "server.datapack.last", handler: (event: Internal.DataPackEventJS) => void);
declare function onEvent(name: "worldgen.remove", handler: (event: Internal.WorldgenRemoveEventJSForge) => void);
declare function captureEvent(name: "worldgen.remove", handler: (event: Internal.WorldgenRemoveEventJSForge) => void);
declare function onEvent(name: "item.tooltip", handler: (event: Internal.ItemTooltipEventJS) => void);
declare function captureEvent(name: "item.tooltip", handler: (event: Internal.ItemTooltipEventJS) => void);
declare function onEvent(name: "item.entity_interact", handler: (event: Internal.ItemEntityInteractEventJS) => void);
declare function captureEvent(name: "item.entity_interact", handler: (event: Internal.ItemEntityInteractEventJS) => void);
declare function onEvent(name: "item.left_click", handler: (event: Internal.ItemLeftClickEventJS) => void);
declare function captureEvent(name: "item.left_click", handler: (event: Internal.ItemLeftClickEventJS) => void);
declare function onEvent(name: "item.toss", handler: (event: Internal.ItemTossEventJS) => void);
declare function captureEvent(name: "item.toss", handler: (event: Internal.ItemTossEventJS) => void);
declare function onEvent(name: "item.tags", handler: (event: Internal.TagEventJS) => void);
declare function captureEvent(name: "item.tags", handler: (event: Internal.TagEventJS) => void);
declare function onEvent(name: "block.place", handler: (event: Internal.BlockPlaceEventJS) => void);
declare function captureEvent(name: "block.place", handler: (event: Internal.BlockPlaceEventJS) => void);
declare function onEvent(name: "server.unload", handler: (event: Internal.ServerEventJS) => void);
declare function captureEvent(name: "server.unload", handler: (event: Internal.ServerEventJS) => void);
declare function onEvent(name: "client.init", handler: (event: Internal.ClientEventJS) => void);
declare function captureEvent(name: "client.init", handler: (event: Internal.ClientEventJS) => void);
declare function onEvent(name: "command.run", handler: (event: Internal.CommandEventJS) => void);
declare function captureEvent(name: "command.run", handler: (event: Internal.CommandEventJS) => void);
declare function onEvent(name: "block.break", handler: (event: Internal.BlockBreakEventJS) => void);
declare function captureEvent(name: "block.break", handler: (event: Internal.BlockBreakEventJS) => void);
declare function onEvent(name: "player.advancement", handler: (event: Internal.PlayerAdvancementEventJS) => void);
declare function captureEvent(name: "player.advancement", handler: (event: Internal.PlayerAdvancementEventJS) => void);
declare function onEvent(name: "world.explosion.post", handler: (event: Internal.ExplosionEventJS$Post) => void);
declare function captureEvent(name: "world.explosion.post", handler: (event: Internal.ExplosionEventJS$Post) => void);
declare function onEvent(name: "item.crafted", handler: (event: Internal.ItemCraftedEventJS) => void);
declare function captureEvent(name: "item.crafted", handler: (event: Internal.ItemCraftedEventJS) => void);
declare function onEvent(name: "entity.check_spawn", handler: (event: Internal.CheckLivingEntitySpawnEventJS) => void);
declare function captureEvent(name: "entity.check_spawn", handler: (event: Internal.CheckLivingEntitySpawnEventJS) => void);
declare function onEvent(name: "item.right_click", handler: (event: Internal.ItemRightClickEventJS) => void);
declare function captureEvent(name: "item.right_click", handler: (event: Internal.ItemRightClickEventJS) => void);
declare function onEvent(name: "player.inventory.closed", handler: (event: Internal.InventoryEventJS) => void);
declare function captureEvent(name: "player.inventory.closed", handler: (event: Internal.InventoryEventJS) => void);
declare function onEvent(name: "worldgen.add", handler: (event: Internal.WorldgenAddEventJSForge) => void);
declare function captureEvent(name: "worldgen.add", handler: (event: Internal.WorldgenAddEventJSForge) => void);
declare function onEvent(name: "world.load", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function captureEvent(name: "world.load", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function onEvent(name: "player.inventory.changed", handler: (event: Internal.InventoryChangedEventJS) => void);
declare function captureEvent(name: "player.inventory.changed", handler: (event: Internal.InventoryChangedEventJS) => void);
declare function onEvent(name: "world.unload", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function captureEvent(name: "world.unload", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function onEvent(name: "jei.remove.recipes", handler: (event: Internal.RemoveJEIRecipesEvent) => void);
declare function captureEvent(name: "jei.remove.recipes", handler: (event: Internal.RemoveJEIRecipesEvent) => void);
declare function onEvent(name: "entity_type.tags", handler: (event: Internal.TagEventJS) => void);
declare function captureEvent(name: "entity_type.tags", handler: (event: Internal.TagEventJS) => void);
declare function onEvent(name: "entity.drops", handler: (event: Internal.LivingEntityDropsEventJS) => void);
declare function captureEvent(name: "entity.drops", handler: (event: Internal.LivingEntityDropsEventJS) => void);
declare function onEvent(name: "item.registry", handler: (event: Internal.ItemRegistryEventJS) => void);
declare function captureEvent(name: "item.registry", handler: (event: Internal.ItemRegistryEventJS) => void);
declare function onEvent(name: "item.food_eaten", handler: (event: Internal.ItemFoodEatenEventJS) => void);
declare function captureEvent(name: "item.food_eaten", handler: (event: Internal.ItemFoodEatenEventJS) => void);
declare function onEvent(name: "item.pickup", handler: (event: Internal.ItemPickupEventJS) => void);
declare function captureEvent(name: "item.pickup", handler: (event: Internal.ItemPickupEventJS) => void);
declare function onEvent(name: "jei.hide.items", handler: (event: Internal.HideJEIEventJS) => void);
declare function captureEvent(name: "jei.hide.items", handler: (event: Internal.HideJEIEventJS) => void);
declare function onEvent(name: "world.tick", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function captureEvent(name: "world.tick", handler: (event: Internal.SimpleWorldEventJS) => void);
declare function onEvent(name: "fluid.tags", handler: (event: Internal.TagEventJS) => void);
declare function captureEvent(name: "fluid.tags", handler: (event: Internal.TagEventJS) => void);
declare function onEvent(name: "world.explosion.pre", handler: (event: Internal.ExplosionEventJS$Pre) => void);
declare function captureEvent(name: "world.explosion.pre", handler: (event: Internal.ExplosionEventJS$Pre) => void);
declare function onEvent(name: "client.logged_in", handler: (event: Internal.ClientLoggedInEventJS) => void);
declare function captureEvent(name: "client.logged_in", handler: (event: Internal.ClientLoggedInEventJS) => void);
declare function onEvent(name: "block.right_click", handler: (event: Internal.BlockRightClickEventJS) => void);
declare function captureEvent(name: "block.right_click", handler: (event: Internal.BlockRightClickEventJS) => void);
declare function onEvent(name: "player.chest.closed", handler: (event: Internal.ChestEventJS) => void);
declare function captureEvent(name: "player.chest.closed", handler: (event: Internal.ChestEventJS) => void);
declare function onEvent(name: "jei.subtypes", handler: (event: Internal.JEISubtypesEventJS) => void);
declare function captureEvent(name: "jei.subtypes", handler: (event: Internal.JEISubtypesEventJS) => void);
declare function onEvent(name: "jei.add.items", handler: (event: Internal.AddJEIEventJS) => void);
declare function captureEvent(name: "jei.add.items", handler: (event: Internal.AddJEIEventJS) => void);
declare function onEvent(name: "block.registry", handler: (event: Internal.BlockRegistryEventJS) => void);
declare function captureEvent(name: "block.registry", handler: (event: Internal.BlockRegistryEventJS) => void);
declare function onEvent(name: "server.tick", handler: (event: Internal.ServerEventJS) => void);
declare function captureEvent(name: "server.tick", handler: (event: Internal.ServerEventJS) => void);
declare function onEvent(name: "server.datapack.first", handler: (event: Internal.DataPackEventJS) => void);
declare function captureEvent(name: "server.datapack.first", handler: (event: Internal.DataPackEventJS) => void);
